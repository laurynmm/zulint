#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
from typing import List

from zulint import lister

EXCLUDE_FILES: List[str] = []

TOOLS_DIR = os.path.dirname(os.path.abspath(__file__))
os.chdir(os.path.dirname(TOOLS_DIR))

sys.path.append(os.path.dirname(TOOLS_DIR))

parser = argparse.ArgumentParser(description="Run mypy on files tracked by git.")

parser.add_argument(
    "targets",
    nargs="*",
    default=[],
    help="""files and directories to include in the result.
                    If this is not specified, the current directory is used""",
)

parser.add_argument(
    "-m",
    "--modified",
    action="store_true",
    default=False,
    help="list only modified files",
)

parser.add_argument(
    "-a",
    "--all",
    dest="all",
    action="store_true",
    default=False,
    help="""run mypy on all python files,
                    ignoring the exclude list. This is useful if you have to
                    find out which files fail mypy check.""",
)

args = parser.parse_args()

files_dict = lister.list_files(
    targets=args.targets,
    ftypes=["py"],
    use_shebang=True,
    modified_only=args.modified,
    group_by_ftype=True,
    exclude=EXCLUDE_FILES,
)


pyi_files = set(files_dict["pyi"])
python_files = [
    fpath
    for fpath in files_dict["py"]
    if not fpath.endswith(".py") or fpath + "i" not in pyi_files
]

if not python_files and not pyi_files:
    print("There are no files to run mypy on.")
    sys.exit(0)

mypy_command = "mypy"

# run mypy
status = subprocess.call([mypy_command, "--", *python_files])

if status != 0:
    print("")
    print(
        "See https://zulip.readthedocs.io/en/latest/testing/mypy.html for debugging tips."
    )
sys.exit(status)
